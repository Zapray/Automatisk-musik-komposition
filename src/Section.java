import java.util.List;


/////////////////////////////////////////////////////////////////////
// Denna klass representerar en section 
// En section best친r av en fras/ett antal fraser samt har tv친 ID-"handlingar"
//
// Den f칬rsta ID-handlingen sectionID identifierar vilken typ av frasf칬ljd
// som den specifika section:en 칛r uppbyggd med
//
// Den andra ID-handlingen identicalSectionID 칛r specifik f칬r en viss l친t
// och talar f칬rekommer flera g친nger endast om tv친 extion inom en l친t 칛r
// identiska
//
// phraseLengths talar om hur l친nga fraserna som kommer efter varandra
// 칛r d칛r 1 칛r kort 2 칛r medel 3 칛r l친ng och 4 t칛cker en hel section
//////////////////////////////////////////////////////////////////////
public class Section {

	int sectionID, identicalSectionID;
	int [] phraseLengths; 
	
	private List<Motive> motives;
	
	/////////////////
	// Konstruktor //
	/////////////////
	public Section(int sectionID, int identicalSectionID, 
				   int [] phraseLengths)
	{
		this.sectionID = sectionID;
		this.identicalSectionID = identicalSectionID;
		this.phraseLengths = phraseLengths;
	}
	
	public Section(List<Motive> motives) //Add whatever you need to this constructor, kom ih洞 att phraselengths finns i motives 'Motive.bar'.
	{
		this.motives = motives;
	}
	public List<Motive> getMotives() {
		return motives;
	}
	/**
	 * 
	 * @return how long the Section is in bars
	 */
	public int getLength() {
		int length = 0;
		for(Motive m : motives) {
			length+=m.bars;
		}
		return length;
	}
	
}
